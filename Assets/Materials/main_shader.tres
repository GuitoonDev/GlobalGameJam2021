[gd_resource type="VisualShader" load_steps=65 format=2]

[ext_resource path="res://Assets/Textures/hex_normal.png" type="Texture" id=1]
[ext_resource path="res://Assets/Textures/hex_emit.png" type="Texture" id=2]

[sub_resource type="VisualShaderNodeColorUniform" id=1]
uniform_name = "color"

[sub_resource type="VisualShaderNodeScalarConstant" id=2]
constant = 4.0

[sub_resource type="VisualShaderNodeFresnel" id=3]
default_input_values = [ 2, false, 3, 4.0 ]

[sub_resource type="VisualShaderNodeVectorOp" id=4]

[sub_resource type="VisualShaderNodeScalarOp" id=5]
default_input_values = [ 0, 0.0, 1, 0.8 ]
operator = 2

[sub_resource type="VisualShaderNodeDotProduct" id=6]

[sub_resource type="VisualShaderNodeInput" id=7]
input_name = "normal"

[sub_resource type="VisualShaderNodeVectorCompose" id=8]
default_input_values = [ 0, 0.0, 1, 1.0, 2, 0.0 ]

[sub_resource type="VisualShaderNodeScalarOp" id=9]
default_input_values = [ 0, 0.0, 1, 0.45 ]
operator = 9

[sub_resource type="VisualShaderNodeScalarOp" id=10]
operator = 2

[sub_resource type="VisualShaderNodeTexture" id=11]
texture = ExtResource( 1 )

[sub_resource type="VisualShaderNodeTransformVecMult" id=12]
operator = 1

[sub_resource type="VisualShaderNodeInput" id=13]
input_name = "inv_camera"

[sub_resource type="VisualShaderNodeScalarFunc" id=14]
function = 12

[sub_resource type="VisualShaderNodeScalarFunc" id=15]
function = 31

[sub_resource type="VisualShaderNodeColorConstant" id=16]
constant = Color( 0.631531, 0.631531, 0.631531, 1 )

[sub_resource type="VisualShaderNodeInput" id=17]
input_name = "viewport_size"

[sub_resource type="VisualShaderNodeInput" id=18]
input_name = "screen_uv"

[sub_resource type="VisualShaderNodeInput" id=19]
input_name = "vertex"

[sub_resource type="VisualShaderNodeVectorOp" id=20]
default_input_values = [ 0, Vector3( 0, 0, 0 ), 1, Vector3( 0.5, 0.5, 0 ) ]
operator = 1

[sub_resource type="VisualShaderNodeVectorLen" id=21]

[sub_resource type="VisualShaderNodeScalarSmoothStep" id=22]
default_input_values = [ 0, 0.2, 1, 0.21, 2, 0.0 ]

[sub_resource type="VisualShaderNodeVectorDecompose" id=23]

[sub_resource type="VisualShaderNodeScalarOp" id=24]
operator = 3

[sub_resource type="VisualShaderNodeVectorCompose" id=25]
default_input_values = [ 0, 0.0, 1, 1.0, 2, 1.0 ]

[sub_resource type="VisualShaderNodeVectorOp" id=26]
operator = 2

[sub_resource type="VisualShaderNodeScalarConstant" id=27]

[sub_resource type="VisualShaderNodeBooleanUniform" id=28]
uniform_name = "torchIsOn"

[sub_resource type="VisualShaderNodeTransformVecMult" id=29]

[sub_resource type="VisualShaderNodeVectorOp" id=30]
default_input_values = [ 0, Vector3( 0, 0, 0 ), 1, Vector3( -0.5, 0, 0 ) ]

[sub_resource type="VisualShaderNodeInput" id=31]
input_name = "camera"

[sub_resource type="VisualShaderNodeVectorOp" id=32]

[sub_resource type="VisualShaderNodeVectorOp" id=33]
default_input_values = [ 0, Vector3( 0, 0, 0 ), 1, Vector3( 0.5, 0, 0 ) ]
operator = 2

[sub_resource type="VisualShaderNodeScalarOp" id=34]
default_input_values = [ 0, 1.0, 1, 0.0 ]
operator = 3

[sub_resource type="VisualShaderNodeScalarOp" id=35]
default_input_values = [ 0, 0.0, 1, 0.03 ]

[sub_resource type="VisualShaderNodeScalarConstant" id=36]
constant = 0.3

[sub_resource type="VisualShaderNodeBooleanUniform" id=37]
uniform_name = "blackOut"

[sub_resource type="VisualShaderNodeBooleanUniform" id=38]
uniform_name = "blackIn"

[sub_resource type="VisualShaderNodeBooleanUniform" id=39]
uniform_name = "TransparentIn"

[sub_resource type="VisualShaderNodeVectorDecompose" id=40]

[sub_resource type="VisualShaderNodeBooleanUniform" id=41]
uniform_name = "TransparentOut"

[sub_resource type="VisualShaderNodeExpression" id=42]
size = Vector2( 367, 267 )
expression = "_col = _in + (_out-_in) * t;"

[sub_resource type="VisualShaderNodeColorConstant" id=43]
constant = Color( 0, 0, 0, 1 )

[sub_resource type="VisualShaderNodeExpression" id=44]
size = Vector2( 367, 267 )
expression = "_transp = _in + (_out-_in) * t;"

[sub_resource type="VisualShaderNodeSwitch" id=45]

[sub_resource type="VisualShaderNodeSwitch" id=46]

[sub_resource type="VisualShaderNodeScalarSwitch" id=47]
default_input_values = [ 0, false, 1, 0.0, 2, 1.0 ]

[sub_resource type="VisualShaderNodeScalarSwitch" id=48]
default_input_values = [ 0, false, 1, 0.0, 2, 1.0 ]

[sub_resource type="VisualShaderNodeScalarSwitch" id=49]
default_input_values = [ 0, false, 1, 0.0, 2, 1.0 ]

[sub_resource type="VisualShaderNodeVectorCompose" id=50]

[sub_resource type="VisualShaderNodeScalarSwitch" id=51]
default_input_values = [ 0, false, 1, 1.0, 2, 1.0 ]

[sub_resource type="OpenSimplexNoise" id=52]
seed = 5
octaves = 2
period = 18.9

[sub_resource type="NoiseTexture" id=53]
seamless = true
noise = SubResource( 52 )

[sub_resource type="VisualShaderNodeTexture" id=54]
output_port_for_preview = 0
texture = SubResource( 53 )

[sub_resource type="VisualShaderNodeVectorLen" id=55]

[sub_resource type="VisualShaderNodeScalarOp" id=56]
default_input_values = [ 0, 0.0, 1, 0.02 ]
operator = 2

[sub_resource type="VisualShaderNodeScalarOp" id=57]

[sub_resource type="VisualShaderNodeVectorOp" id=58]

[sub_resource type="VisualShaderNodeInput" id=59]
input_name = "time"

[sub_resource type="VisualShaderNodeScalarOp" id=60]
default_input_values = [ 0, 0.0, 1, 0.05 ]
operator = 2

[sub_resource type="VisualShaderNodeScalarOp" id=61]
default_input_values = [ 0, 0.0, 1, 0.865 ]
operator = 4

[sub_resource type="VisualShaderNodeTexture" id=62]
texture = ExtResource( 2 )

[resource]
code = "shader_type spatial;
render_mode depth_draw_alpha_prepass, cull_disabled, specular_schlick_ggx;

uniform bool blackIn;
uniform vec4 color : hint_color;
uniform bool blackOut;
uniform bool torchIsOn;
uniform sampler2D tex_frg_71;
uniform bool TransparentIn;
uniform bool TransparentOut;
uniform sampler2D tex_frg_2;



void vertex() {
// Output:0

}

void fragment() {
// BooleanUniform:58
	bool n_out58p0 = blackIn;

// Color:62
	vec3 n_out62p0 = vec3(0.000000, 0.000000, 0.000000);
	float n_out62p1 = 1.000000;

// Fresnel:12
	bool n_in12p2 = false;
	float n_in12p3 = 4.00000;
	float n_out12p0 = n_in12p2 ? (pow(clamp(dot(NORMAL, VIEW), 0.0, 1.0), n_in12p3)) : (pow(1.0 - clamp(dot(NORMAL, VIEW), 0.0, 1.0), n_in12p3));

// ScalarOp:14
	float n_in14p1 = 0.80000;
	float n_out14p0 = n_out12p0 * n_in14p1;

// ColorUniform:10
	vec3 n_out10p0 = color.rgb;
	float n_out10p1 = color.a;

// VectorOp:13
	vec3 n_out13p0 = vec3(n_out14p0) + n_out10p0;

// VectorSwitch:64
	vec3 n_out64p0;
	if(n_out58p0)
	{
		n_out64p0 = n_out62p0;
	}
	else
	{
		n_out64p0 = n_out13p0;
	}

// BooleanUniform:57
	bool n_out57p0 = blackOut;

// VectorSwitch:65
	vec3 n_out65p0;
	if(n_out57p0)
	{
		n_out65p0 = n_out62p0;
	}
	else
	{
		n_out65p0 = n_out13p0;
	}

// BooleanUniform:39
	bool n_out39p0 = torchIsOn;

// Scalar:56
	float n_out56p0 = 0.300000;

// Input:27
	vec3 n_out27p0 = vec3(VIEWPORT_SIZE, 0.0);

// VectorDecompose:33
	float n_out33p0 = n_out27p0.x;
	float n_out33p1 = n_out27p0.y;
	float n_out33p2 = n_out27p0.z;

// ScalarOp:34
	float n_out34p0 = n_out33p0 / n_out33p1;

// VectorCompose:35
	float n_in35p1 = 1.00000;
	float n_in35p2 = 1.00000;
	vec3 n_out35p0 = vec3(n_out34p0, n_in35p1, n_in35p2);

// Input:28
	vec3 n_out28p0 = vec3(SCREEN_UV, 0.0);

// VectorOp:49
	vec3 n_in49p1 = vec3(-0.50000, 0.00000, 0.00000);
	vec3 n_out49p0 = n_out28p0 + n_in49p1;

// ScalarOp:53
	float n_in53p0 = 1.00000;
	float n_out53p0 = n_in53p0 / n_out34p0;

// VectorOp:52
	vec3 n_in52p1 = vec3(0.50000, 0.00000, 0.00000);
	vec3 n_out52p0 = vec3(n_out53p0) * n_in52p1;

// VectorOp:51
	vec3 n_out51p0 = n_out49p0 + n_out52p0;

// VectorOp:36
	vec3 n_out36p0 = n_out35p0 * n_out51p0;

// VectorOp:30
	vec3 n_in30p1 = vec3(0.50000, 0.50000, 0.00000);
	vec3 n_out30p0 = n_out36p0 - n_in30p1;

// Input:76
	float n_out76p0 = TIME;

// ScalarOp:77
	float n_in77p1 = 0.05000;
	float n_out77p0 = n_out76p0 * n_in77p1;

// VectorOp:75
	vec3 n_out75p0 = n_out30p0 + vec3(n_out77p0);

// Texture:71
	vec4 tex_frg_71_read = texture(tex_frg_71, n_out75p0.xy);
	vec3 n_out71p0 = tex_frg_71_read.rgb;
	float n_out71p1 = tex_frg_71_read.a;

// VectorLen:72
	float n_out72p0 = length(n_out71p0);

// ScalarOp:73
	float n_in73p1 = 0.02000;
	float n_out73p0 = n_out72p0 * n_in73p1;

// ScalarOp:74
	float n_out74p0 = n_out56p0 + n_out73p0;

// ScalarOp:55
	float n_in55p1 = 0.03000;
	float n_out55p0 = n_out74p0 + n_in55p1;

// VectorLen:31
	float n_out31p0 = length(n_out30p0);

// ScalarSmoothStep:32
	float n_out32p0 = smoothstep(n_out74p0, n_out55p0, n_out31p0);

// ScalarSwitch:68
	float n_in68p2 = 1.00000;
	float n_out68p0;
	if(n_out39p0)
	{
		n_out68p0 = n_out32p0;
	}
	else
	{
		n_out68p0 = n_in68p2;
	}

// Expression:61
	vec3 n_out61p0;
	n_out61p0 = vec3(0.0, 0.0, 0.0);
	{
		n_out61p0 = n_out64p0 + (n_out65p0-n_out64p0) * n_out68p0;
	}

// BooleanUniform:59
	bool n_out59p0 = TransparentIn;

// ScalarSwitch:66
	float n_in66p1 = 0.00000;
	float n_in66p2 = 1.00000;
	float n_out66p0;
	if(n_out59p0)
	{
		n_out66p0 = n_in66p1;
	}
	else
	{
		n_out66p0 = n_in66p2;
	}

// BooleanUniform:60
	bool n_out60p0 = TransparentOut;

// ScalarSwitch:67
	float n_in67p1 = 0.00000;
	float n_in67p2 = 1.00000;
	float n_out67p0;
	if(n_out60p0)
	{
		n_out67p0 = n_in67p1;
	}
	else
	{
		n_out67p0 = n_in67p2;
	}

// Expression:63
	float n_out63p0;
	n_out63p0 = 0.0;
	{
		n_out63p0 = n_out66p0 + (n_out67p0-n_out66p0) * n_out68p0;
	}

// ScalarSwitch:70
	float n_in70p1 = 1.00000;
	float n_in70p2 = 1.00000;
	float n_out70p0;
	if(n_out68p0 > 0.0 ? true : false)
	{
		n_out70p0 = n_in70p1;
	}
	else
	{
		n_out70p0 = n_in70p2;
	}

// Scalar:37
	float n_out37p0 = 0.000000;

// Input:5
	mat4 n_out5p0 = CAMERA_MATRIX;

// Input:3
	vec3 n_out3p0 = VERTEX;

// TransformVectorMult:4
	vec3 n_out4p0 = (n_out5p0 * vec4(n_out3p0, 1.0)).xyz;

// VectorDecompose:6
	float n_out6p0 = n_out4p0.x;
	float n_out6p1 = n_out4p0.y;
	float n_out6p2 = n_out4p0.z;

// ScalarOp:8
	float n_in8p1 = 0.86500;
	float n_out8p0 = mod(n_out6p0, n_in8p1);

// VectorCompose:7
	float n_in7p2 = 0.00000;
	vec3 n_out7p0 = vec3(n_out8p0, n_out6p2, n_in7p2);

// Texture:2
	vec4 tex_frg_2_read = texture(tex_frg_2, n_out7p0.xy);
	vec3 n_out2p0 = tex_frg_2_read.rgb;
	float n_out2p1 = tex_frg_2_read.a;

// Input:21
	mat4 n_out21p0 = INV_CAMERA_MATRIX;

// Input:16
	vec3 n_out16p0 = NORMAL;

// TransformVectorMult:20
	vec3 n_out20p0 = (vec4(n_out16p0, 1.0) * n_out21p0).xyz;

// VectorCompose:17
	float n_in17p0 = 0.00000;
	float n_in17p1 = 1.00000;
	float n_in17p2 = 0.00000;
	vec3 n_out17p0 = vec3(n_in17p0, n_in17p1, n_in17p2);

// DotProduct:15
	float n_out15p0 = dot(n_out20p0, n_out17p0);

// ScalarFunc:22
	float n_out22p0 = abs(n_out15p0);

// ScalarOp:18
	float n_in18p1 = 0.45000;
	float n_out18p0 = step(n_out22p0, n_in18p1);

// ScalarFunc:23
	float n_out23p0 = 1.0 - n_out18p0;

// Scalar:11
	float n_out11p0 = 4.000000;

// ScalarOp:19
	float n_out19p0 = n_out23p0 * n_out11p0;

// Output:0
	ALBEDO = n_out61p0;
	ALPHA = n_out63p0;
	ROUGHNESS = n_out70p0;
	SPECULAR = n_out37p0;
	NORMALMAP = n_out2p0;
	NORMALMAP_DEPTH = n_out19p0;

}

void light() {
// Output:0

}
"
modes/cull = 2
modes/depth_draw = 3
nodes/fragment/0/position = Vector2( 340, 420 )
nodes/fragment/2/node = SubResource( 11 )
nodes/fragment/2/position = Vector2( -2220, 1260 )
nodes/fragment/3/node = SubResource( 19 )
nodes/fragment/3/position = Vector2( -3420, 1320 )
nodes/fragment/4/node = SubResource( 29 )
nodes/fragment/4/position = Vector2( -3180, 1260 )
nodes/fragment/5/node = SubResource( 31 )
nodes/fragment/5/position = Vector2( -3380, 1240 )
nodes/fragment/6/node = SubResource( 40 )
nodes/fragment/6/position = Vector2( -2920, 1240 )
nodes/fragment/7/node = SubResource( 50 )
nodes/fragment/7/position = Vector2( -2520, 1240 )
nodes/fragment/8/node = SubResource( 61 )
nodes/fragment/8/position = Vector2( -2700, 1180 )
nodes/fragment/9/node = SubResource( 62 )
nodes/fragment/9/position = Vector2( -2420, 800 )
nodes/fragment/10/node = SubResource( 1 )
nodes/fragment/10/position = Vector2( -1520, 480 )
nodes/fragment/11/node = SubResource( 2 )
nodes/fragment/11/position = Vector2( -440, 1280 )
nodes/fragment/12/node = SubResource( 3 )
nodes/fragment/12/position = Vector2( -1800, 360 )
nodes/fragment/13/node = SubResource( 4 )
nodes/fragment/13/position = Vector2( -1360, 360 )
nodes/fragment/14/node = SubResource( 5 )
nodes/fragment/14/position = Vector2( -1540, 360 )
nodes/fragment/15/node = SubResource( 6 )
nodes/fragment/15/position = Vector2( -920, 1120 )
nodes/fragment/16/node = SubResource( 7 )
nodes/fragment/16/position = Vector2( -1440, 1120 )
nodes/fragment/17/node = SubResource( 8 )
nodes/fragment/17/position = Vector2( -1120, 1200 )
nodes/fragment/18/node = SubResource( 9 )
nodes/fragment/18/position = Vector2( -520, 1080 )
nodes/fragment/19/node = SubResource( 10 )
nodes/fragment/19/position = Vector2( -120, 1080 )
nodes/fragment/20/node = SubResource( 12 )
nodes/fragment/20/position = Vector2( -1220, 1040 )
nodes/fragment/21/node = SubResource( 13 )
nodes/fragment/21/position = Vector2( -1420, 1040 )
nodes/fragment/22/node = SubResource( 14 )
nodes/fragment/22/position = Vector2( -740, 1080 )
nodes/fragment/23/node = SubResource( 15 )
nodes/fragment/23/position = Vector2( -340, 1080 )
nodes/fragment/25/node = SubResource( 16 )
nodes/fragment/25/position = Vector2( -2440, 680 )
nodes/fragment/27/node = SubResource( 17 )
nodes/fragment/27/position = Vector2( -4060, -400 )
nodes/fragment/28/node = SubResource( 18 )
nodes/fragment/28/position = Vector2( -3620, -180 )
nodes/fragment/30/node = SubResource( 20 )
nodes/fragment/30/position = Vector2( -2720, -360 )
nodes/fragment/31/node = SubResource( 21 )
nodes/fragment/31/position = Vector2( -2180, 20 )
nodes/fragment/32/node = SubResource( 22 )
nodes/fragment/32/position = Vector2( -1980, -20 )
nodes/fragment/33/node = SubResource( 23 )
nodes/fragment/33/position = Vector2( -3780, -440 )
nodes/fragment/34/node = SubResource( 24 )
nodes/fragment/34/position = Vector2( -3560, -440 )
nodes/fragment/35/node = SubResource( 25 )
nodes/fragment/35/position = Vector2( -3360, -500 )
nodes/fragment/36/node = SubResource( 26 )
nodes/fragment/36/position = Vector2( -2940, -380 )
nodes/fragment/37/node = SubResource( 27 )
nodes/fragment/37/position = Vector2( 40, 600 )
nodes/fragment/39/node = SubResource( 28 )
nodes/fragment/39/position = Vector2( -1960, -120 )
nodes/fragment/49/node = SubResource( 30 )
nodes/fragment/49/position = Vector2( -3360, -200 )
nodes/fragment/51/node = SubResource( 32 )
nodes/fragment/51/position = Vector2( -2920, -220 )
nodes/fragment/52/node = SubResource( 33 )
nodes/fragment/52/position = Vector2( -3140, -280 )
nodes/fragment/53/node = SubResource( 34 )
nodes/fragment/53/position = Vector2( -3340, -380 )
nodes/fragment/55/node = SubResource( 35 )
nodes/fragment/55/position = Vector2( -2180, -140 )
nodes/fragment/56/node = SubResource( 36 )
nodes/fragment/56/position = Vector2( -2740, 80 )
nodes/fragment/57/node = SubResource( 37 )
nodes/fragment/57/position = Vector2( -1160, 180 )
nodes/fragment/58/node = SubResource( 38 )
nodes/fragment/58/position = Vector2( -1160, 20 )
nodes/fragment/59/node = SubResource( 39 )
nodes/fragment/59/position = Vector2( -1160, 460 )
nodes/fragment/60/node = SubResource( 41 )
nodes/fragment/60/position = Vector2( -1160, 600 )
nodes/fragment/61/node = SubResource( 42 )
nodes/fragment/61/position = Vector2( -720, 20 )
nodes/fragment/61/size = Vector2( 367, 267 )
nodes/fragment/61/input_ports = "0,1,_in;1,1,_out;2,0,t;"
nodes/fragment/61/output_ports = "0,1,_col;"
nodes/fragment/61/expression = "_col = _in + (_out-_in) * t;"
nodes/fragment/62/node = SubResource( 43 )
nodes/fragment/62/position = Vector2( -1320, 240 )
nodes/fragment/63/node = SubResource( 44 )
nodes/fragment/63/position = Vector2( -720, 440 )
nodes/fragment/63/size = Vector2( 367, 267 )
nodes/fragment/63/input_ports = "0,0,_in;1,0,_out;2,0,t;"
nodes/fragment/63/output_ports = "0,0,_transp;"
nodes/fragment/63/expression = "_transp = _in + (_out-_in) * t;"
nodes/fragment/64/node = SubResource( 45 )
nodes/fragment/64/position = Vector2( -960, 20 )
nodes/fragment/65/node = SubResource( 46 )
nodes/fragment/65/position = Vector2( -960, 180 )
nodes/fragment/66/node = SubResource( 47 )
nodes/fragment/66/position = Vector2( -960, 460 )
nodes/fragment/67/node = SubResource( 48 )
nodes/fragment/67/position = Vector2( -960, 600 )
nodes/fragment/68/node = SubResource( 49 )
nodes/fragment/68/position = Vector2( -1460, 100 )
nodes/fragment/70/node = SubResource( 51 )
nodes/fragment/70/position = Vector2( -120, 360 )
nodes/fragment/71/node = SubResource( 54 )
nodes/fragment/71/position = Vector2( -3060, 60 )
nodes/fragment/72/node = SubResource( 55 )
nodes/fragment/72/position = Vector2( -2860, 200 )
nodes/fragment/73/node = SubResource( 56 )
nodes/fragment/73/position = Vector2( -2700, 180 )
nodes/fragment/74/node = SubResource( 57 )
nodes/fragment/74/position = Vector2( -2500, 60 )
nodes/fragment/75/node = SubResource( 58 )
nodes/fragment/75/position = Vector2( -3240, 160 )
nodes/fragment/76/node = SubResource( 59 )
nodes/fragment/76/position = Vector2( -3620, 240 )
nodes/fragment/77/node = SubResource( 60 )
nodes/fragment/77/position = Vector2( -3440, 200 )
nodes/fragment/connections = PoolIntArray( 2, 0, 0, 8, 5, 0, 4, 0, 3, 0, 4, 1, 4, 0, 6, 0, 6, 0, 8, 0, 6, 2, 7, 1, 7, 0, 9, 0, 12, 0, 14, 0, 17, 0, 15, 1, 16, 0, 20, 1, 11, 0, 19, 1, 21, 0, 20, 0, 15, 0, 22, 0, 22, 0, 18, 0, 18, 0, 23, 0, 23, 0, 19, 0, 14, 0, 13, 0, 7, 0, 2, 0, 8, 0, 7, 0, 19, 0, 0, 9, 20, 0, 15, 0, 31, 0, 32, 2, 27, 0, 33, 0, 34, 0, 35, 0, 33, 1, 34, 1, 33, 0, 34, 0, 35, 0, 36, 0, 30, 0, 31, 0, 36, 0, 30, 0, 28, 0, 49, 0, 49, 0, 51, 0, 51, 0, 36, 1, 52, 0, 51, 1, 34, 0, 53, 1, 53, 0, 52, 0, 55, 0, 32, 1, 62, 0, 64, 1, 13, 0, 64, 2, 58, 0, 64, 0, 64, 0, 61, 0, 62, 0, 65, 1, 13, 0, 65, 2, 57, 0, 65, 0, 65, 0, 61, 1, 59, 0, 66, 0, 66, 0, 63, 0, 60, 0, 67, 0, 67, 0, 63, 1, 39, 0, 68, 0, 68, 0, 61, 2, 32, 0, 68, 1, 68, 0, 63, 2, 61, 0, 0, 0, 63, 0, 0, 1, 37, 0, 0, 4, 68, 0, 70, 0, 70, 0, 0, 3, 71, 0, 72, 0, 72, 0, 73, 0, 56, 0, 74, 0, 74, 0, 32, 0, 74, 0, 55, 0, 73, 0, 74, 1, 30, 0, 75, 0, 75, 0, 71, 0, 76, 0, 77, 0, 77, 0, 75, 1, 10, 0, 13, 1 )
